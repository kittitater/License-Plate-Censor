{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "78d147ed-f551-4db7-8000-6bc131d097f0",
   "metadata": {},
   "outputs": [],
   "source": [
    "#!/usr/bin/env python3\n",
    "\n",
    "import argparse, itertools, logging\n",
    "from pathlib import Path\n",
    "from collections import Counter\n",
    "\n",
    "import numpy  as np\n",
    "import pandas as pd\n",
    "from sklearn.preprocessing import MultiLabelBinarizer\n",
    "from nltk.stem import WordNetLemmatizer\n",
    "\n",
    "# ────────────────────────\n",
    "# config\n",
    "# ────────────────────────\n",
    "TOP_RATING       = 7.5\n",
    "MIN_VOTES        = 10_000\n",
    "RARE_KW_MAX      = 3\n",
    "TOP_ACTORS_N     = 100\n",
    "TOP_DIRECTOR_N   = 100\n",
    "\n",
    "lemm = WordNetLemmatizer()\n",
    "\n",
    "# ────────────────────────\n",
    "def main(clean_path: Path, out_path: Path):\n",
    "    log.info(\"Loading %s …\", clean_path)\n",
    "    df = pd.read_csv(clean_path)\n",
    "\n",
    "    # 1) high‑quality filter\n",
    "    hq = df[(df[\"rating\"] >= TOP_RATING) & (df[\"votes\"] >= MIN_VOTES)].copy()\n",
    "    log.info(\"High‑quality subset: %d rows\", len(hq))\n",
    "\n",
    "    # 2) genre one‑hot\n",
    "    mlb = MultiLabelBinarizer()\n",
    "    ohe  = mlb.fit_transform(hq[\"genres\"])\n",
    "    genre_cols = [f\"genre_{g.replace(' ','_').lower()}\" for g in mlb.classes_]\n",
    "    hq[genre_cols] = ohe\n",
    "    hq[\"genre_count\"] = hq[\"genres\"].str.len()\n",
    "\n",
    "    # 3) keyword clean + rare trim\n",
    "    hq[\"plot_keyword\"] = hq[\"plot_keyword\"].apply(\n",
    "        lambda lst: sorted({lemm.lemmatize(str(k).lower().strip()) for k in lst})\n",
    "    )\n",
    "    kw_freq = Counter(itertools.chain.from_iterable(hq[\"plot_keyword\"]))\n",
    "    rare_kw = {k for k,c in kw_freq.items() if c <= RARE_KW_MAX}\n",
    "    hq[\"plot_keyword\"] = hq[\"plot_keyword\"].apply(\n",
    "        lambda ks: [k for k in ks if k not in rare_kw]\n",
    "    )\n",
    "    hq[\"kw_count\"] = hq[\"plot_keyword\"].str.len()\n",
    "\n",
    "    # 4) most‑common actors\n",
    "    actor_freq = Counter(itertools.chain.from_iterable(hq[\"top_5_casts\"]))\n",
    "    top_actors = {a for a,_ in actor_freq.most_common(TOP_ACTORS_N)}\n",
    "    for a in top_actors:\n",
    "        col = f\"actor_{a.split()[-1].lower()}\"\n",
    "        hq[col] = hq[\"top_5_casts\"].apply(lambda lst: int(a in lst))\n",
    "\n",
    "    # 5) directors one‑hot (top N)\n",
    "    top_dirs = hq[\"director\"].value_counts().head(TOP_DIRECTOR_N).index\n",
    "    for d in top_dirs:\n",
    "        col = f\"director_{d.split()[-1].lower()}\"\n",
    "        hq[col] = (hq[\"director\"] == d).astype(int)\n",
    "\n",
    "    # 6) popularity & temporal features\n",
    "    C = hq[\"rating\"].mean(); m = MIN_VOTES\n",
    "    hq[\"weighted_rating\"] = ((hq[\"votes\"]/(hq[\"votes\"]+m))*hq[\"rating\"] +\n",
    "                             (m/(hq[\"votes\"]+m))*C)\n",
    "    hq[\"log_votes\"] = np.log10(hq[\"votes\"]+1)\n",
    "    hq[\"decade\"]    = (hq[\"year\"]//10)*10\n",
    "    hq[\"runtime_bucket\"] = pd.cut(\n",
    "        hq[\"runtime_min\"],\n",
    "        bins=[0,90,110,140,1e9],\n",
    "        labels=[\"<90\",\"90‑110\",\"110‑140\",\">140\"]\n",
    "    )\n",
    "\n",
    "    # 7) export\n",
    "    hq.to_csv(out_path, index=False)\n",
    "    log.info(\"Saved features: %s  (%d cols × %d rows)\",\n",
    "             out_path, hq.shape[1], hq.shape[0])\n",
    "\n",
    "# ────────────────────────\n",
    "if __name__ == \"__main__\":\n",
    "    logging.basicConfig(level=logging.INFO,\n",
    "                        format=\"%(levelname)s | %(message)s\")\n",
    "    log = logging.getLogger(__name__)\n",
    "\n",
    "    p = argparse.ArgumentParser()\n",
    "    p.add_argument(\"--in\",  dest=\"clean\", type=Path, default=\"cleaned-dataset.csv\")\n",
    "    p.add_argument(\"--out\", dest=\"out\",   type=Path, default=\"featured-dataset.csv\")\n",
    "    args = p.parse_args()\n",
    "\n",
    "    main(args.clean, args.out)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
